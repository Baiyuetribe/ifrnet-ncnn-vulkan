name: release
on: [push, pull_request]

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  APPLICATION_NAME: ifrnet-ncnn-vulkan

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-appname
      id: get_appname
      run: echo ::set-output name=APPNAME::${APPLICATION_NAME}
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  # ubuntu:
  #   needs: [setup]
  #   runs-on: ubuntu-18.04
  #   env:
  #     PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - name: cache-vulkansdk
  #     id: cache-vulkansdk
  #     uses: actions/cache@v1
  #     with:
  #       path: "1.2.162.0"
  #       key: vulkansdk-linux-x86_64-1.2.162.0
  #   - name: vulkansdk
  #     if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
  #     run: |
  #       wget https://sdk.lunarg.com/sdk/download/1.2.162.0/linux/vulkansdk-linux-x86_64-1.2.162.0.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.2.162.0.tar.gz
  #       tar -xf vulkansdk-linux-x86_64-1.2.162.0.tar.gz
  #       rm -rf 1.2.162.0/source 1.2.162.0/samples
  #       find 1.2.162.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm
  #   - name: build
  #     run: |
  #       export VULKAN_SDK=`pwd`/1.2.162.0/x86_64
  #       mkdir build && cd build
  #       cmake ../src
  #       cmake --build . -j 2
  #   - name: package
  #     run: |
  #       mkdir -p ifrnet-ncnn-vulkan
  #       cp README.md LICENSE ifrnet-ncnn-vulkan
  #       cp build/${{ needs.setup.outputs.APPNAME }} ifrnet-ncnn-vulkan
  #       strip -g ifrnet-ncnn-vulkan/${{ needs.setup.outputs.APPNAME }}
  #       cp -r models/* ifrnet-ncnn-vulkan
  #       zip -9 -r ifrnet-ncnn-vulkan.zip ifrnet-ncnn-vulkan
  #   - name: upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ifrnet-ncnn-vulkan
  #       path: ifrnet-ncnn-vulkan.zip

  # windows:
  #   needs: [setup]
  #   runs-on: windows-latest
  #   env:
  #     PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - name: cache-vulkansdk
  #     id: cache-vulkansdk
  #     uses: actions/cache@v1
  #     with:
  #       path: "VulkanSDK"
  #       key: VulkanSDK-1.2.162.0-Installer
  #   - name: vulkansdk
  #     if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
  #     run: |
  #       Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.2.162.0/windows/VulkanSDK-1.2.162.0-Installer.exe?Human=true -OutFile VulkanSDK-1.2.162.0-Installer.exe
  #       7z x -aoa ./VulkanSDK-1.2.162.0-Installer.exe -oVulkanSDK
  #       Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\Samples, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32, .\VulkanSDK\Bin32, .\VulkanSDK\Lib32 -Recurse
  #   - name: build
  #     run: |
  #       $env:VULKAN_SDK="$(pwd)/VulkanSDK"
  #       mkdir build; cd build
  #       cmake -A x64 ../src
  #       cmake --build . --config Release -j 2
  #   - name: package
  #     run: |
  #       mkdir ifrnet-ncnn-vulkan
  #       Copy-Item -Verbose -Path "README.md" -Destination "ifrnet-ncnn-vulkan"
  #       Copy-Item -Verbose -Path "LICENSE" -Destination "ifrnet-ncnn-vulkan"
  #       Copy-Item -Verbose -Path "build\Release\${{ needs.setup.outputs.APPNAME }}.exe" -Destination "ifrnet-ncnn-vulkan"
  #       Copy-Item -Verbose -Path "C:\windows\system32\vcomp140.dll" -Destination "ifrnet-ncnn-vulkan"
  #       Copy-Item -Verbose -Recurse -Path "models\*" -Destination "ifrnet-ncnn-vulkan"
  #       7z a -r ifrnet-ncnn-vulkan.zip ifrnet-ncnn-vulkan
  #   - name: upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ifrnet-ncnn-vulkan
  #       path: ifrnet-ncnn-vulkan.zip

  windows:
    needs: [setup]
    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "VulkanSDK"
        key: VulkanSDK-1.2.162.0-Installer
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.2.162.0/windows/VulkanSDK-1.2.162.0-Installer.exe?Human=true -OutFile VulkanSDK-1.2.162.0-Installer.exe
        7z x -aoa ./VulkanSDK-1.2.162.0-Installer.exe -oVulkanSDK
        Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\Samples, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32, .\VulkanSDK\Bin32, .\VulkanSDK\Lib32 -Recurse
    - name: build
      run: |
        $env:VULKAN_SDK="$(pwd)/VulkanSDK"
        mkdir build; cd build
        cmake -A x64 ../src
        cmake --build . --config Release -j 2
    - name: package
      run: |
        mkdir ifrnet-ncnn-vulkan
        Copy-Item -Verbose -Recurse -Path "D:\a\ifrnet-ncnn-vulkan\ifrnet-ncnn-vulkan\*" -Destination "ifrnet-ncnn-vulkan"
        7z a -r ifrnet-ncnn-vulkan.zip ifrnet-ncnn-vulkan
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ifrnet-ncnn-vulkan
        path: ifrnet-ncnn-vulkan.zip
